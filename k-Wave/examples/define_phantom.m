function [sound_speed_map, density_map, scattering_circle] = define_phantom(c0, ...
            rho0, Nx_tot, Ny_tot,Nz_tot, dx, ...
            background_map_mean,background_map_std, ...
            radius, ...
            x_pos,y_pos, ...
            scattering_mean_c1, ...
            scattering_std_c2, ...
            scattering_divider_c3)
    % Get the parameters properly
    constant_scattering_region_add = scattering_mean_c1;
    constant_scattering_region_multiplier = scattering_std_c2;
    constant_scattering_region_divider = scattering_divider_c3;
    % define a random distribution of scatterers for the medium
    background_map = background_map_mean + background_map_std * randn([Nx_tot, ...
                        Ny_tot, Nz_tot]);
    % define a random distribution of scatterers for the highly scattering
    scattering_map = randn([Nx_tot, Ny_tot, Nz_tot]);
    scattering_c0 = c0 + constant_scattering_region_add + constant_scattering_region_multiplier * scattering_map;
    scattering_rho0 = scattering_c0 / constant_scattering_region_divider;
   
    % Scattering region: initialize uniform medium
    sound_speed_map = c0 * ones(Nx_tot, Ny_tot, Nz_tot) .* background_map;
    density_map = rho0 * ones(Nx_tot, Ny_tot, Nz_tot) .* background_map;
    % ---- Define Shapes ----
    scattering_circle = makeBall(Nx_tot, Ny_tot, Nz_tot, ...
                        round(x_pos/dx), round(y_pos/dx), ...
                        Nz_tot/2, round(radius/dx));
    % Modify sound speed and density for each shape
    sound_speed_map(scattering_circle == 1) = scattering_c0(scattering_circle == 1);
    density_map(scattering_circle == 1) = scattering_rho0(scattering_circle == 1);
end
